name: 'publish'

on:
  push:
    tags:
    - 'v*'  # Triggers when a tag like v1.0.0 is pushed
  workflow_dispatch:

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    environment: .env
    steps:
      - uses: actions/checkout@v4
      
      - name: 'Create env file'
        if: matrix.platform == 'windows-latest'
        shell: "cmd"
        run: echo YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }} > .env

      - name: 'Create env file'
        if: matrix.platform == 'macos-latest'
        shell: "bash"
        run: echo YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }} > .env
        
      - name: install Rust nightly
        run: |
          rustup toolchain install nightly
          rustup default nightly

      - name: Add wasm32-unknown-unknown
        run: rustup target add wasm32-unknown-unknown
        
      - name: Install Trunk
        run: cargo install trunk

      - name: Install stylance
        run: cargo install stylance-cli

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true
          args: ${{ matrix.args }}
